<?php

// src/Ghost/PlatformBundle/Controller/AdvertController.php

namespace Ghost\PlatformBundle\Controller;

use Ghost\PlatformBundle\Entity\Advert;
use Ghost\PlatformBundle\Form\AdvertType;
use Ghost\PlatformBundle\Form\AdvertEditType;
use Ghost\PlatformBundle\Form\ApplicationType;
use Ghost\PlatformBundle\Form\ApplicationEditType;
use Ghost\PlatformBundle\Form\CommentType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Ghost\PlatformBundle\Entity\Image;
use Ghost\PlatformBundle\Entity\Application;
use Ghost\PlatformBundle\Entity\Category;
use Ghost\PlatformBundle\Entity\AdvertSkill;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\FormType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Ghost\PlatformBundle\Entity\Comment; 

class AdvertController extends Controller
{
  public function indexAction($page)
  {
   if ($page < 1) {
    throw $this->createNotFoundException("La page ".$page." n'existe pas.");
  }

    // Ici je fixe le nombre d'annonces par page à 3
    // Mais bien sûr il faudrait utiliser un paramètre, et y accéder via $this->container->getParameter('nb_per_page')
  $nbPerPage = 3;

    // On récupère notre objet Paginator
  $listAdverts = $this->getDoctrine()
  ->getManager()
  ->getRepository('GhostPlatformBundle:Advert')
  ->findall();
  ;

    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces
  $nbPages = ceil(count($listAdverts) / $nbPerPage);

  if(count($listAdverts) == 0){
    $nbPages = 1;
  }

    // Si la page n'existe pas, on retourne une 404
  if ($page > $nbPages) {
    throw $this->createNotFoundException("La page ".$page." n'existe pas.");
  }

    // On donne toutes les informations nécessaires à la vue
  return $this->render('GhostPlatformBundle:Advert:index.html.twig', array(
    'listAdverts' => $listAdverts,
    'nbPages'     => $nbPages,
    'page'        => $page,
    ));
}

public function viewAction($id)
{
  $em = $this->getDoctrine()->getManager();

    // Pour récupérer une seule annonce, on utilise la méthode find($id)
  $advert = $em->getRepository('GhostPlatformBundle:Advert')->find($id);

    // $advert est donc une instance de Ghost\PlatformBundle\Entity\Advert
    // ou null si l'id $id n'existe pas, d'où ce if :
  if (null === $advert) {
    throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");
  }

    // Récupération de la liste des candidatures de l'annonce
  $listApplications = $em
  ->getRepository('GhostPlatformBundle:Application')
  ->findBy(array('advert' => $advert))
  ;

    // Récupération des AdvertSkill de l'annonce
  $listAdvertSkills = $em
  ->getRepository('GhostPlatformBundle:AdvertSkill')
  ->findBy(array('advert' => $advert))
  ;

  // Récupération des Comment de l'annonce
  /*$listComment = $em
  ->getRepository('GhostPlatformBundle:Comment')
  ->findBy(array('advert' => $advert))*/
  ;

  return $this->render('GhostPlatformBundle:Advert:view.html.twig', array(
    'advert'           => $advert,
    'listApplications' => $listApplications,
    'listAdvertSkills' => $listAdvertSkills,
    ));
}

public function addAction(Request $request)
{
  $advert = new Advert();
  $form   = $this->get('form.factory')->create(AdvertType::class, $advert);

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {

    // On récupère l'EntityManager
    $em = $this->getDoctrine()->getManager();

    // Étape 1 : On « persiste » l'entité
    $em->persist($advert);

    // Étape 2 : On « flush » tout ce qui a été persisté avant
    $em->flush();


    $request->getSession()->getFlashBag()->add('notice', 'Annonce bien enregistrée.');

    return $this->redirectToRoute('ghost_platform_view', array('id' => $advert->getId()));
  }

  return $this->render('GhostPlatformBundle:Advert:add.html.twig', array(
    'form' => $form->createView(), 'advert' => $advert
    ));
}

public function editAction($id, Request $request)
{
  $em = $this->getDoctrine()->getManager();

  $advert = $em->getRepository('GhostPlatformBundle:Advert')->find($id);

  if (null === $advert) {
    throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");
  }

  $form = $this->get('form.factory')->create(AdvertEditType::class, $advert);

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {
      // Inutile de persister ici, Doctrine connait déjà notre annonce
    $em->flush();

    $request->getSession()->getFlashBag()->add('notice', 'Annonce bien modifiée.');

    return $this->redirectToRoute('ghost_platform_view', array('id' => $advert->getId()));
  }

  return $this->render('GhostPlatformBundle:Advert:edit.html.twig', array(
    'advert' => $advert,
    'form'   => $form->createView(),
    ));
}

public function deleteAction(Request $request, $id)
{
  $em = $this->getDoctrine()->getManager();

  $advert = $em->getRepository('GhostPlatformBundle:Advert')->find($id);

  if (null === $advert) {
    throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");
  }

    // On crée un formulaire vide, qui ne contiendra que le champ CSRF
    // Cela permet de protéger la suppression d'annonce contre cette faille
  $form = $this->get('form.factory')->create();

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {
    $em->remove($advert);
    $em->flush();

    $request->getSession()->getFlashBag()->add('info', "L'annonce a bien été supprimée.");

    return $this->redirectToRoute('ghost_platform_home');
  }

  return $this->render('GhostPlatformBundle:Advert:delete.html.twig', array(
    'advert' => $advert,
    'form'   => $form->createView(),
    ));
}

public function menuAction($limit)
{
  $em = $this->getDoctrine()->getManager();

  $listAdverts = $em->getRepository('GhostPlatformBundle:Advert')->findBy(
      array(),                 // Pas de critère
      array('date' => 'desc'), // On trie par date décroissante
      $limit,                  // On sélectionne $limit annonces
      0                        // À partir du premier
      );

  return $this->render('GhostPlatformBundle:Advert:menu.html.twig', array(
    'listAdverts' => $listAdverts
    ));
}

public function editcoAction($id, Request $request)
{
  $em = $this->getDoctrine()->getManager();

  $appl = $em->getRepository('GhostPlatformBundle:Application')->find($id);

  if (null === $appl) {
    throw new NotFoundHttpException("Le commantaire d'id ".$id." n'existe pas.");
  }

  $form = $this->get('form.factory')->create(ApplicationEditType::class, $appl);

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {
      // Inutile de persister ici, Doctrine connait déjà notre annonce
    $em->flush();

    $request->getSession()->getFlashBag()->add('notice', 'Commentaire bien modifiée.');

    return $this->redirectToRoute('ghost_platform_view', array('id' => $appl->getAdvert()));
  }

  return $this->render('GhostPlatformBundle:Advert:comm.html.twig', array(
    'appl' => $appl,
    'form'   => $form->createView(),
    ));
}

public function deletecoAction(Request $request, $id)
{
  $em = $this->getDoctrine()->getManager();

  $appl = $em->getRepository('GhostPlatformBundle:Application')->find($id);


  if (null === $appl) {
    throw new NotFoundHttpException("Le commantaire d'id ".$id." n'existe pas.");
  }

    // On crée un formulaire vide, qui ne contiendra que le champ CSRF
    // Cela permet de protéger la suppression d'annonce contre cette faille
  $form = $this->get('form.factory')->create();

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {
    $em->remove($appl);
    $em->flush();

    $request->getSession()->getFlashBag()->add('info', "Le commentaire a bien été supprimée.");

    return $this->redirectToRoute('ghost_platform_view', array('id' => $appl->getAdvert()));
  }

  return $this->render('GhostPlatformBundle:Advert:deleteco.html.twig', array(
    'appl' => $appl,
    'form'   => $form->createView(),
    ));
}

public function addcommentAction(Request $request, $id)
{

  $em = $this->getDoctrine()->getManager();

  $appl = new Application();
  $advert = $em->getRepository('GhostPlatformBundle:Advert')->find($id);
  $appl->setAdvert($advert);
  $form   = $this->get('form.factory')->create(ApplicationType::class, $appl);

  if ($request->isMethod('POST') && $form->handleRequest($request)->isValid()) {

    // On récupère l'EntityManager
    $em = $this->getDoctrine()->getManager();

    // Étape 1 : On « persiste » l'entité
    $em->persist($appl);

    // Étape 2 : On « flush » tout ce qui a été persisté avant
    $em->flush();


    $request->getSession()->getFlashBag()->add('notice', 'Commentaire bien enregistrée.');

    return $this->redirectToRoute('ghost_platform_view', array('id' => $appl->getAdvert()));
  }

  return $this->render('GhostPlatformBundle:Advert:comm1.html.twig', array(
    'form' => $form->createView(), 'appl' => $appl
    ));
}

}
